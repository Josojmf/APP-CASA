name: "üîç House App - Advanced Sanity & Health Check"

on:
  workflow_run:
    workflows: ["üè† House App CI/CD - Build, Test, Push & Deploy"]
    types: [completed]
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      deep_check:
        description: "Run deep integration tests"
        required: false
        default: false
        type: boolean
      stress_test:
        description: "Run load/stress tests"
        required: false
        default: false
        type: boolean
      security_scan:
        description: "Run security vulnerability scan"
        required: false
        default: false
        type: boolean

env:
  PROD_URL: "https://www.house-app.casa"
  TIMEOUT: 30
  RETRY_COUNT: 3
  MAX_RESPONSE_TIME: 3.0

jobs:
  comprehensive-health-check:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    timeout-minutes: 25

    steps:
      - name: üì¶ Checkout for test scripts
        uses: actions/checkout@v4

      - name: üêç Setup Python for advanced testing
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: üß∞ Install CLI tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq dnsutils bc

      - name: üîß Setup environment
        run: |
          echo "BASE_URL=${{ env.PROD_URL }}" >> $GITHUB_ENV
          echo "ENV_NAME=production" >> $GITHUB_ENV
          echo "Using BASE_URL=$BASE_URL (ENV_NAME=$ENV_NAME)"

      - name: üì¶ Install testing dependencies
        run: |
          pip install --upgrade pip
          pip install requests beautifulsoup4 selenium pytest httpx aiohttp

      - name: üìù Create report header
        run: |
          {
            echo "# üè† House App - Advanced Sanity & Health Check Report"
            echo
            echo "![Health Check](https://img.shields.io/badge/Health%20Check-Running-blue)"
            echo "![Environment](https://img.shields.io/badge/Environment-$ENV_NAME-green)"
            echo
            echo "## üìã Test Summary"
            echo "- **Environment:** $ENV_NAME"
            echo "- **Base URL:** $BASE_URL"
            echo "- **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "- **Triggered by:** ${{ github.event_name }}"
            echo "- **Commit SHA:** ${{ github.sha }}"
            echo "- **Workflow Run:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo
          } > health_report.md

      - name: ‚è≥ Wait for deployment stabilization
        if: github.event_name == 'workflow_run'
        run: |
          echo "‚è≥ Esperando 2 minutos para estabilizaci√≥n del deployment..."
          sleep 120

      - name: üåê Advanced Connectivity & Infrastructure Check
        id: connectivity
        run: |
          set +e
          echo "## üåê Infrastructure & Connectivity Tests" >> health_report.md
          echo "" >> health_report.md

          ALL_OK=true
          # Fallback por si BASE_URL no viene definido en este contexto
          if [[ -z "$BASE_URL" ]]; then BASE_URL="${{ env.PROD_URL }}"; fi

          DOMAIN=$(echo "$BASE_URL" | sed 's|https\?://||' | sed 's|/.*||')
          if [[ -z "$DOMAIN" ]]; then
            echo "| Domain Parsing | ‚ùå FAIL | Could not derive domain from BASE_URL='$BASE_URL' |" >> health_report.md
            ALL_OK=false
          fi

          echo "### DNS Resolution Tests" >> health_report.md
          echo "| DNS Server | Status | Response Time | IP Address |" >> health_report.md
          echo "|------------|--------|---------------|------------|" >> health_report.md

          for dns_server in "8.8.8.8" "1.1.1.1" "8.8.4.4"; do
            echo "üîç Testing DNS resolution via $dns_server..."
            START_TIME=$(date +%s.%N)
            IP_RESULT=$(dig +time=2 +tries=1 +short @"$dns_server" "$DOMAIN" A 2>/dev/null | head -1)
            END_TIME=$(date +%s.%N)
            DNS_TIME=$(echo "$END_TIME - $START_TIME" | bc)

            if [[ -n "$IP_RESULT" ]]; then
              echo "| $dns_server | ‚úÖ PASS | ${DNS_TIME}s | $IP_RESULT |" >> health_report.md
            else
              echo "| $dns_server | ‚ùå FAIL | ${DNS_TIME}s | N/A |" >> health_report.md
              ALL_OK=false
            fi
          done

          echo "" >> health_report.md
          echo "### SSL/TLS Security Analysis" >> health_report.md
          echo "| Check | Status | Details |" >> health_report.md
          echo "|-------|--------|---------|" >> health_report.md

          # Si no usas TLS (http), no penalizamos
          SCHEME=$(echo "$BASE_URL" | awk -F: '{print tolower($1)}')
          if [[ "$SCHEME" != "https" ]]; then
            echo "| TLS | ‚ÑπÔ∏è SKIPPED | Base URL is HTTP (no TLS) |" >> health_report.md
          else
            # Informaci√≥n TLS solo si es https (no penalizamos por parsers)
            SSL_INFO=$(timeout 15s bash -c "echo | openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null")
            if [[ $? -eq 0 && -n "$SSL_INFO" ]]; then
              EXPIRY_DATE=$(echo "$SSL_INFO" | openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)
              if [[ -n "$EXPIRY_DATE" ]]; then
                EXPIRY_EPOCH=$(date -d "$EXPIRY_DATE" +%s 2>/dev/null || echo "0")
                CURRENT_EPOCH=$(date +%s)
                DAYS_LEFT=$(( (EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))
                echo "| Certificate Validity | ‚úÖ INFO | Expires in $DAYS_LEFT days ($EXPIRY_DATE) |" >> health_report.md
              else
                echo "| Certificate Validity | ‚ö†Ô∏è UNKNOWN | Could not parse certificate |" >> health_report.md
              fi

              # Detecci√≥n robusta de versi√≥n TLS (no falla ALL_OK si no detecta)
              TLS_VERSION=""
              for ver in -tls1_3 -tls1_2; do
                if echo | openssl s_client $ver -servername "$DOMAIN" -connect "$DOMAIN:443" >/dev/null 2>&1; then
                  TLS_VERSION=${ver#-}
                  break
                fi
              done
              if [[ -n "$TLS_VERSION" ]]; then
                echo "| TLS Version | ‚úÖ PASS | ${TLS_VERSION^^} |" >> health_report.md
              else
                echo "| TLS Version | ‚ö†Ô∏è UNKNOWN | Could not detect |" >> health_report.md
              fi

              CERT_CHAIN_LENGTH=$(echo "$SSL_INFO" | grep -c "BEGIN CERTIFICATE")
              echo "| Certificate Chain | ‚úÖ INFO | $CERT_CHAIN_LENGTH certificates |" >> health_report.md
            else
              echo "| SSL Connection | ‚ö†Ô∏è SKIPPED | Could not establish SSL connection |" >> health_report.md
            fi
          fi

          echo "" >> health_report.md
          echo "connectivity_ok=$ALL_OK" >> $GITHUB_OUTPUT
          set -e

      - name: üè• Core Application Health & Functionality
        id: health
        run: |
          echo "## üè• Core Application Health & Functionality" >> health_report.md
          echo "" >> health_report.md

          ALL_OK=true

          test_endpoint_advanced() {
            local url=$1
            local endpoint_name=$2
            local expected_content=$3

            echo "üîç Testing $endpoint_name..."
            for i in $(seq 1 $RETRY_COUNT); do
              RESPONSE=$(curl -sSL -D - -o /tmp/body.out -w "HTTPSTATUS:%{http_code};TIME:%{time_total};SIZE:%{size_download};REDIRECT:%{num_redirects}" \
                --max-time $TIMEOUT \
                --user-agent "HouseApp-AdvancedHealthCheck/2.0" \
                -H "Accept: text/html,application/json,*/*" \
                -H "Accept-Language: es-ES,es;q=0.9,en;q=0.8" \
                -H "Cache-Control: no-cache" \
                "$url" 2>/dev/null)

              HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
              RESPONSE_TIME=$(echo "$RESPONSE" | grep -o "TIME:[0-9.]*" | cut -d: -f2)
              CONTENT_SIZE=$(echo "$RESPONSE" | grep -o "SIZE:[0-9]*" | cut -d: -f2)
              REDIRECTS=$(echo "$RESPONSE" | grep -o "REDIRECT:[0-9]*" | cut -d: -f2)
              BODY=$(cat /tmp/body.out)
              CT=$(sed -n 's/^Content-[Tt]ype:[[:space:]]*\(.*\)$/\1/p' <(echo "$RESPONSE") | head -1)

              PERF_STATUS="‚úÖ"
              if (( $(echo "$RESPONSE_TIME > $MAX_RESPONSE_TIME" | bc -l) )); then
                PERF_STATUS="‚ö†Ô∏è SLOW"
              fi

              CONTENT_STATUS="‚úÖ Valid"
              if [[ -n "$expected_content" && "$BODY" != *"$expected_content"* ]]; then
                CONTENT_STATUS="‚ùå Missing: $expected_content"
              fi
              if [[ "$CT" == text/html* && $CONTENT_SIZE -lt 500 ]]; then
                CONTENT_STATUS="‚ö†Ô∏è Suspiciously small (${CONTENT_SIZE}b)"
              fi

              if [[ "$HTTP_CODE" == "200" && ${#BODY} -gt 100 ]]; then
                echo "| $endpoint_name | ‚úÖ $HTTP_CODE | ${RESPONSE_TIME}s $PERF_STATUS | ${CONTENT_SIZE}b | $REDIRECTS | $CONTENT_STATUS |" >> health_report.md
                return 0
              fi

              if [[ $i -lt $RETRY_COUNT ]]; then
                echo "‚ö†Ô∏è Attempt $i failed for $endpoint_name, retrying in 5s..."
                sleep 5
              fi
            done

            echo "| $endpoint_name | ‚ùå ${HTTP_CODE:-ERR} | ${RESPONSE_TIME:-N/A}s | ${CONTENT_SIZE:-N/A}b | ${REDIRECTS:-N/A} | Failed |" >> health_report.md
            return 1
          }

          echo "### Page Load Tests" >> health_report.md
          echo "| Page | Status | Response Time | Size | Redirects | Content Check |" >> health_report.md
          echo "|------|--------|---------------|------|-----------|---------------|" >> health_report.md

          test_endpoint_advanced "$BASE_URL/" "üè† Home Page" "House App" || ALL_OK=false
          test_endpoint_advanced "$BASE_URL/tareas" "üìã Tasks Page" "tareas" || ALL_OK=false
          test_endpoint_advanced "$BASE_URL/calendario" "üìÖ Calendar Page" "calendario" || ALL_OK=false
          test_endpoint_advanced "$BASE_URL/lista_compra" "üõí Shopping List" "lista" || ALL_OK=false
          test_endpoint_advanced "$BASE_URL/menus" "üçΩÔ∏è Menus Page" "menu" || ALL_OK=false
          test_endpoint_advanced "$BASE_URL/chat" "üí¨ Chat Page" "chat" || ALL_OK=false
          test_endpoint_advanced "$BASE_URL/asistente-familiar" "ü§ñ AI Assistant" "asistente" || ALL_OK=false
          test_endpoint_advanced "$BASE_URL/mercadona" "üõçÔ∏è Mercadona Store" "mercadona" || ALL_OK=false
          test_endpoint_advanced "$BASE_URL/configuracion" "‚öôÔ∏è Settings Page" "configuracion" || ALL_OK=false

          echo "" >> health_report.md
          echo "health_ok=$ALL_OK" >> $GITHUB_OUTPUT

      - name: üîó Advanced API & Services Validation
        id: api
        run: |
          echo "## üîó API & Services Health Check" >> health_report.md
          echo "" >> health_report.md
          ALL_OK=true

          test_api_advanced() {
            local endpoint=$1
            local endpoint_name=$2
            local method=${3:-GET}
            local auth_required=${4:-false}

            echo "üîç Testing API: $endpoint_name ($method)..."
            if [[ "$method" == "GET" ]]; then
              RESPONSE=$(curl -sSL -w "HTTPSTATUS:%{http_code};TIME:%{time_total}" \
                --max-time $TIMEOUT \
                -H "Content-Type: application/json" \
                -H "Accept: application/json" \
                -H "User-Agent: HouseApp-API-Check/2.0" \
                "$endpoint" -o /tmp/api_body.out 2>/dev/null)
            else
              RESPONSE=$(curl -sSL -w "HTTPSTATUS:%{http_code};TIME:%{time_total}" \
                -X "$method" \
                --max-time $TIMEOUT \
                -H "Content-Type: application/json" \
                -H "Accept: application/json" \
                -H "User-Agent: HouseApp-API-Check/2.0" \
                "$endpoint" -d '{}' -o /tmp/api_body.out 2>/dev/null)
            fi

            HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
            API_TIME=$(echo "$RESPONSE" | grep -o "TIME:[0-9.]*" | cut -d: -f2)
            BODY=$(cat /tmp/api_body.out)

            PERF_STATUS="‚úÖ Fast"
            if (( $(echo "$API_TIME > 2.0" | bc -l) )); then
              PERF_STATUS="‚ö†Ô∏è Slow"
            fi

            if [[ "$HTTP_CODE" == "200" ]]; then
              if echo "$BODY" | jq . >/dev/null 2>&1; then
                echo "| $endpoint_name | ‚úÖ $HTTP_CODE | ${API_TIME}s $PERF_STATUS | ‚úÖ Valid JSON | Success |" >> health_report.md
                return 0
              else
                echo "| $endpoint_name | ‚ùå $HTTP_CODE | ${API_TIME}s | ‚ùå Invalid JSON | Failed |" >> health_report.md
                return 1
              fi
            elif [[ "$HTTP_CODE" == "401" || "$HTTP_CODE" == "403" ]]; then
              if [[ "$auth_required" == "true" ]]; then
                echo "| $endpoint_name | ‚úÖ $HTTP_CODE | ${API_TIME}s | üîí Auth Required | Expected |" >> health_report.md
                return 0
              else
                echo "| $endpoint_name | ‚ö†Ô∏è $HTTP_CODE | ${API_TIME}s | üîí Unexpected Auth | Warning |" >> health_report.md
                return 1
              fi
            elif [[ "$HTTP_CODE" == "404" ]]; then
              echo "| $endpoint_name | ‚ùå $HTTP_CODE | ${API_TIME}s | üö´ Not Found | Failed |" >> health_report.md
              return 1
            else
              echo "| $endpoint_name | ‚ùå $HTTP_CODE | ${API_TIME}s | ‚ùå Server Error | Failed |" >> health_report.md
              return 1
            fi
          }

          echo "### API Endpoints Tests" >> health_report.md
          echo "| Endpoint | Status | Response Time | Data Format | Result |" >> health_report.md
          echo "|----------|--------|---------------|-------------|--------|" >> health_report.md

          test_api_advanced "$BASE_URL/health" "Health Check" "GET" false || true
          test_api_advanced "$BASE_URL/api/stats" "Statistics API" "GET" true || true
          test_api_advanced "$BASE_URL/api/users" "Users API" "GET" true || true
          test_api_advanced "$BASE_URL/api/lista_compra" "Shopping List API" "GET" true || true
          test_api_advanced "$BASE_URL/mercadona/categories" "Mercadona Categories" "GET" true || true

          echo "" >> health_report.md
          echo "api_ok=$ALL_OK" >> $GITHUB_OUTPUT

      - name: üß™ Deep Integration & Feature Tests
        if: github.event.inputs.deep_check == 'true' || github.event_name == 'schedule'
        id: integration
        run: |
          set +e
          echo "## üß™ Deep Integration & Feature Tests" >> health_report.md
          echo "" >> health_report.md
          ALL_OK=true

          echo "### Static Resources Tests" >> health_report.md
          echo "| Resource Type | URL | Status | Size | Load Time |" >> health_report.md
          echo "|---------------|-----|--------|------|-----------|" >> health_report.md

          # --- Descubrimiento autom√°tico de assets desde la home ---
          cat > discover_assets.py << 'EOF'
          import sys, requests, re
          from bs4 import BeautifulSoup
          from urllib.parse import urljoin

          base = sys.argv[1].rstrip('/') + '/'
          html = ""
          try:
              r = requests.get(base, timeout=30)
              r.raise_for_status()
              html = r.text
          except Exception as e:
              print(f"ERR:{e}")

          soup = BeautifulSoup(html, 'html.parser')
          seen=set()
          js, css, icons = [], [], []
          manifest = None

          for tag in soup.find_all('script', src=True):
              u = urljoin(base, tag['src'])
              if u not in seen:
                  seen.add(u); js.append(u)

          for tag in soup.find_all('link', href=True):
              rels = [x.lower() for x in (tag.get('rel') or [])]
              href = urljoin(base, tag['href'])
              if 'stylesheet' in rels and href not in seen:
                  seen.add(href); css.append(href)
              if any(r in rels for r in ['icon','shortcut icon','apple-touch-icon']) and href not in seen:
                  seen.add(href); icons.append(href)
              if 'manifest' in rels and not manifest:
                  manifest = href

          # Candidatos a service worker: /sw.js, /static/sw.js y los que aparezcan registrados en scripts
          sw_candidates=set([urljoin(base, 'sw.js'), urljoin(base, 'static/sw.js')])
          for tag in soup.find_all('script'):
              if tag.string:
                  m = re.search(r"serviceWorker\.register\(['\"]([^'\"]+)['\"]", tag.string)
                  if m:
                      sw_candidates.add(urljoin(base, m.group(1)))

          # Fallback m√≠nimos razonables
          for u in ['static/js/main.js']:
              u = urljoin(base, u)
              if u not in seen: js.append(u); seen.add(u)
          for u in ['static/styles/global.css']:
              u = urljoin(base, u)
              if u not in seen: css.append(u); seen.add(u)

          def write_list(path, items, limit):
              with open(path,'w') as f:
                  for it in list(dict.fromkeys(items))[:limit]:
                      f.write(it+'\n')

          write_list('assets_js.txt', js, 15)
          write_list('assets_css.txt', css, 15)
          write_list('icons.txt', icons, 10)
          with open('manifest_url.txt','w') as f:
              f.write(manifest or '')
          write_list('sw_candidates.txt', list(sw_candidates), 5)
          EOF

          python discover_assets.py "$BASE_URL/"

          check_static () {
            local type="$1"
            local url="$2"
            local R CODE SIZE TIME
            R=$(curl -sS -o /dev/null -w "HTTPSTATUS:%{http_code};SIZE:%{size_download};TIME:%{time_total}" --max-time 15 "$url")
            CODE=$(echo "$R"  | sed -n 's/.*HTTPSTATUS:\([0-9]\{3\}\).*/\1/p')
            SIZE=$(echo "$R"  | sed -n 's/.*SIZE:\([0-9]\+\).*/\1/p')
            TIME=$(echo "$R"  | sed -n 's/.*TIME:\([0-9.]\+\).*/\1/p')
            if [[ "$CODE" == "200" ]]; then
              echo "| $type | $url | ‚úÖ PASS ($CODE) | ${SIZE}b | ${TIME}s |" >> health_report.md
            else
              echo "| $type | $url | ‚ùå FAIL ($CODE) | N/A | N/A |" >> health_report.md
              ALL_OK=false
            fi
          }

          if [[ -s assets_js.txt ]]; then
            while IFS= read -r u; do
              [[ -n "$u" ]] && check_static "JavaScript" "$u"
            done < assets_js.txt
          else
            echo "| JavaScript | - | ‚ö†Ô∏è NO ASSETS FOUND | - | - |" >> health_report.md
          fi

          if [[ -s assets_css.txt ]]; then
            while IFS= read -r u; do
              [[ -n "$u" ]] && check_static "CSS" "$u"
            done < assets_css.txt
          else
            echo "| CSS | - | ‚ö†Ô∏è NO ASSETS FOUND | - | - |" >> health_report.md
          fi

          echo "" >> health_report.md
          echo "### Progressive Web App Tests" >> health_report.md
          echo "| PWA Feature | Status | Details |" >> health_report.md
          echo "|-------------|--------|---------|" >> health_report.md

          # Service Worker: probar candidatos detectados y /sw.js y /static/sw.js
          SW_OK=false
          SW_TRIED=()

          try_sw () {
            local url="$1"
            [[ -z "$url" ]] && return 1
            local code
            local body
            code=$(curl -sS -w "%{http_code}" --max-time 10 "$url" -o /tmp/sw_body.out || true)
            body=$(cat /tmp/sw_body.out 2>/dev/null)
            SW_TRIED+=("$url($code)")
            if [[ "$code" == "200" ]] && echo "$body" | grep -qiE 'self\.addEventListener|service\s*worker|skipWaiting|clients\.claim'; then
              echo "| Service Worker | ‚úÖ PASS | $url (${#body} chars) |" >> health_report.md
              return 0
            fi
            return 1
          }

          # Intentos: candidatos detectados, luego /sw.js y /static/sw.js por si no aparecieran
          if [[ -s sw_candidates.txt ]]; then
            while IFS= read -r sw; do
              try_sw "$sw" && SW_OK=true && break
            done < sw_candidates.txt
          fi
          if [[ "$SW_OK" != "true" ]]; then
            try_sw "$BASE_URL/sw.js" || try_sw "$BASE_URL/static/sw.js"
            [[ $? -eq 0 ]] && SW_OK=true
          fi

          if [[ "$SW_OK" == "true" ]]; then
            : # ya reportado PASS
          else
            echo "| Service Worker | ‚ö†Ô∏è MISSING | Tried: ${SW_TRIED[*]} |" >> health_report.md
            # Nota: no penalizamos ALL_OK por no usar PWA
          fi

          # Manifest: usar el detectado; si no, fallback
          MANIFEST_URL=$(cat manifest_url.txt)
          if [[ -z "$MANIFEST_URL" ]]; then
            MANIFEST_URL="$BASE_URL/static/manifest.json"
          fi
          MANIFEST_RESPONSE=$(curl -sS --max-time 10 "$MANIFEST_URL")
          if echo "$MANIFEST_RESPONSE" | jq . >/dev/null 2>&1; then
            APP_NAME=$(echo "$MANIFEST_RESPONSE" | jq -r '.name // "N/A"')
            echo "| Web Manifest | ‚úÖ PASS | $MANIFEST_URL (App: $APP_NAME) |" >> health_report.md
          else
            echo "| Web Manifest | ‚ùå FAIL | Invalid or missing ($MANIFEST_URL) |" >> health_report.md
            ALL_OK=false
          fi

          # Iconos: probar detectado o fallback
          ICON_OK=false
          if [[ -s icons.txt ]]; then
            ICON_URL=$(head -1 icons.txt)
            CODE=$(curl -sS -o /dev/null -w "%{http_code}" --max-time 5 "$ICON_URL")
            if [[ "$CODE" == "200" ]]; then
              echo "| App Icons | ‚úÖ PASS | $ICON_URL |" >> health_report.md
              ICON_OK=true
            fi
          fi
          if [[ "$ICON_OK" != "true" ]]; then
            CODE=$(curl -sS -o /dev/null -w "%{http_code}" --max-time 5 "$BASE_URL/static/icons/house-icon.png")
            if [[ "$CODE" == "200" ]]; then
              echo "| App Icons | ‚úÖ PASS | $BASE_URL/static/icons/house-icon.png |" >> health_report.md
            else
              echo "| App Icons | ‚ùå FAIL | Icons missing or inaccessible |" >> health_report.md
              ALL_OK=false
            fi
          fi

          echo "" >> health_report.md
          echo "integration_ok=$ALL_OK" >> $GITHUB_OUTPUT
          set -e

      - name: ‚ö° Performance & Load Analysis
        if: github.event.inputs.stress_test == 'true'
        id: performance
        run: |
          echo "## ‚ö° Performance & Load Analysis" >> health_report.md
          echo "" >> health_report.md
          ALL_OK=true

          cat > load_test.py << 'EOF'
          import asyncio, aiohttp, time, statistics, sys, math
          async def test_endpoint(session, url, semaphore):
              async with semaphore:
                  start = time.time()
                  try:
                      async with session.get(url, timeout=30) as response:
                          await response.text()
                          return {'status': response.status, 'time': time.time()-start, 'success': response.status==200}
                  except Exception:
                      return {'status': 0, 'time': time.time()-start, 'success': False}
          async def load_test(url, concurrent_users=10, total_requests=50):
              sem = asyncio.Semaphore(concurrent_users)
              conn = aiohttp.TCPConnector(limit=100)
              timeout = aiohttp.ClientTimeout(total=30)
              async with aiohttp.ClientSession(connector=conn, timeout=timeout) as session:
                  tasks = [test_endpoint(session, url, sem) for _ in range(total_requests)]
                  return await asyncio.gather(*tasks)
          if __name__ == "__main__":
              url = sys.argv[1]
              results = asyncio.run(load_test(url))
              succ = [r for r in results if r['success']]
              fail = [r for r in results if not r['success']]
              if succ:
                  times = [r['time'] for r in succ]
                  avg = statistics.mean(times); mn=min(times); mx=max(times)
                  p95 = sorted(times)[max(0, math.floor(0.95*len(times))-1)]
              else:
                  avg=mn=mx=p95=0
              print(f"TOTAL:{len(results)}")
              print(f"SUCCESS:{len(succ)}")
              print(f"FAILED:{len(fail)}")
              print(f"SUCCESS_RATE:{(len(succ)/len(results)*100):.1f}")
              print(f"AVG_TIME:{avg:.3f}")
              print(f"MIN_TIME:{mn:.3f}")
              print(f"MAX_TIME:{mx:.3f}")
              print(f"P95_TIME:{p95:.3f}")
          EOF

          echo "### Load Testing Results" >> health_report.md
          echo "| Test Type | Total Requests | Success Rate | Avg Time | Min/Max Time | P95 Time |" >> health_report.md
          echo "|-----------|----------------|--------------|----------|--------------|----------|" >> health_report.md

          LOAD_RESULTS=$(python load_test.py "$BASE_URL/")

          TOTAL=$(echo "$LOAD_RESULTS"   | grep "TOTAL:"        | cut -d: -f2)
          SUCCESS=$(echo "$LOAD_RESULTS" | grep "SUCCESS:"      | cut -d: -f2)
          SUCCESS_RATE=$(echo "$LOAD_RESULTS" | grep "SUCCESS_RATE:" | cut -d: -f2)
          AVG_TIME=$(echo "$LOAD_RESULTS"    | grep "AVG_TIME:"  | cut -d: -f2)
          MIN_TIME=$(echo "$LOAD_RESULTS"    | grep "MIN_TIME:"  | cut -d: -f2)
          MAX_TIME=$(echo "$LOAD_RESULTS"    | grep "MAX_TIME:"  | cut -d: -f2)
          P95_TIME=$(echo "$LOAD_RESULTS"    | grep "P95_TIME:"  | cut -d: -f2)

          LOAD_STATUS="‚úÖ"
          if (( $(echo "$SUCCESS_RATE < 95" | bc -l) )); then LOAD_STATUS="‚ö†Ô∏è"; ALL_OK=false; fi
          if (( $(echo "$AVG_TIME > 3.0"     | bc -l) )); then LOAD_STATUS="‚ùå"; ALL_OK=false; fi

          echo "| Light Load | $TOTAL | $LOAD_STATUS ${SUCCESS_RATE}% | ${AVG_TIME}s | ${MIN_TIME}s/${MAX_TIME}s | ${P95_TIME}s |" >> health_report.md
          echo "" >> health_report.md
          echo "performance_ok=$ALL_OK" >> $GITHUB_OUTPUT

      - name: üîê Security & Vulnerability Scan
        if: github.event.inputs.security_scan == 'true'
        id: security
        run: |
          echo "## üîê Security Analysis" >> health_report.md
          echo "" >> health_report.md
          ALL_OK=true

          echo "### Security Headers Check" >> health_report.md
          echo "| Security Header | Status | Value |" >> health_report.md
          echo "|-----------------|--------|-------|" >> health_report.md

          HEADERS_RESPONSE=$(curl -sI --max-time 10 "$BASE_URL/")
          if echo "$HEADERS_RESPONSE" | grep -iq "content-security-policy"; then
            echo "| Content-Security-Policy | ‚úÖ PRESENT | Configured |" >> health_report.md
          else
            echo "| Content-Security-Policy | ‚ö†Ô∏è MISSING | Not configured |" >> health_report.md
          fi
          if echo "$HEADERS_RESPONSE" | grep -iq "x-frame-options"; then
            echo "| X-Frame-Options | ‚úÖ PRESENT | Configured |" >> health_report.md
          else
            echo "| X-Frame-Options | ‚ö†Ô∏è MISSING | Not configured |" >> health_report.md
          fi
          if echo "$HEADERS_RESPONSE" | grep -iq "x-content-type-options"; then
            echo "| X-Content-Type-Options | ‚úÖ PRESENT | Configured |" >> health_report.md
          else
            echo "| X-Content-Type-Options | ‚ö†Ô∏è MISSING | Not configured |" >> health_report.md
          fi
          if echo "$HEADERS_RESPONSE" | grep -iq "strict-transport-security"; then
            HSTS_VALUE=$(echo "$HEADERS_RESPONSE" | grep -i "strict-transport-security" | cut -d: -f2- | tr -d '\r')
            echo "| Strict-Transport-Security | ‚úÖ PRESENT | $HSTS_VALUE |" >> health_report.md
          else
            echo "| Strict-Transport-Security | ‚ùå MISSING | HTTPS not enforced |" >> health_report.md
            ALL_OK=false
          fi
          if echo "$HEADERS_RESPONSE" | grep -iq "x-xss-protection"; then
            echo "| X-XSS-Protection | ‚úÖ PRESENT | Configured |" >> health_report.md
          else
            echo "| X-XSS-Protection | ‚ö†Ô∏è MISSING | Not configured |" >> health_report.md
          fi

          echo "" >> health_report.md
          echo "### Vulnerability Scan Results" >> health_report.md
          echo "| Vulnerability Check | Status | Details |" >> health_report.md
          echo "|---------------------|--------|---------|" >> health_report.md

          TRAVERSAL_TEST=$(curl -s -w "HTTPSTATUS:%{http_code}" --max-time 10 "$BASE_URL/../../../etc/passwd")
          TRAVERSAL_CODE=$(echo "$TRAVERSAL_TEST" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          if [[ "$TRAVERSAL_CODE" == "404" || "$TRAVERSAL_CODE" == "403" ]]; then
            echo "| Directory Traversal | ‚úÖ PROTECTED | Returns $TRAVERSAL_CODE |" >> health_report.md
          else
            echo "| Directory Traversal | ‚ùå VULNERABLE | Returns $TRAVERSAL_CODE |" >> health_report.md
            ALL_OK=false
          fi

          SERVER_HEADER=$(echo "$HEADERS_RESPONSE" | grep -i "^server:" | cut -d: -f2- | tr -d '\r' | sed 's/^ *//')
          if [[ -z "$SERVER_HEADER" ]]; then
            echo "| Server Header | ‚úÖ HIDDEN | Server info not disclosed |" >> health_report.md
          else
            echo "| Server Header | ‚ö†Ô∏è DISCLOSED | $SERVER_HEADER |" >> health_report.md
          fi

          for admin_path in "admin" "administrator" "wp-admin" "phpmyadmin" "admin.php"; do
            ADMIN_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 "$BASE_URL/$admin_path")
            if [[ "$ADMIN_CODE" == "404" || "$ADMIN_CODE" == "403" ]]; then
              echo "| Admin Path ($admin_path) | ‚úÖ PROTECTED | Returns $ADMIN_CODE |" >> health_report.md
            elif [[ "$ADMIN_CODE" == "200" ]]; then
              echo "| Admin Path ($admin_path) | ‚ö†Ô∏è ACCESSIBLE | Returns $ADMIN_CODE |" >> health_report.md
            fi
          done

          echo "" >> health_report.md
          echo "security_ok=$ALL_OK" >> $GITHUB_OUTPUT

      - name: üìä Advanced Performance Metrics
        run: |
          echo "## üìä Advanced Performance Metrics" >> health_report.md
          echo "" >> health_report.md

          cat > perf_test.py << 'EOF'
          import json, time, statistics, requests
          from bs4 import BeautifulSoup

          URL = "$BASE_URL/"

          def measure_once(url: str):
              metrics = {"ttfb": None, "total_time": None, "content_size": 0,
                        "status_code": 0, "js_files": 0, "css_files": 0, "images": 0}
              start = time.time()
              try:
                  # stream=True para medir TTFB leyendo el primer byte
                  with requests.get(url, stream=True, timeout=30) as r:
                      metrics["status_code"] = r.status_code
                      # leer el primer byte para estimar TTFB
                      first_byte_time = None
                      try:
                          chunk_iter = r.iter_content(chunk_size=1)
                          next(chunk_iter)
                          first_byte_time = time.time()
                      except Exception:
                          # si no hay cuerpo o error de streaming
                          first_byte_time = time.time()
                      metrics["ttfb"] = first_byte_time - start

                      # leer el resto para total_time y tama√±o
                      content = r.content  # descarga completa
                      metrics["total_time"] = time.time() - start
                      metrics["content_size"] = len(content)

                      # conteos b√°sicos
                      try:
                          html = content.decode(r.apparent_encoding or "utf-8", errors="ignore")
                          soup = BeautifulSoup(html, "html.parser")
                          metrics["js_files"] = len(soup.find_all("script", src=True))
                          metrics["css_files"] = len(soup.find_all("link", rel=lambda x: x and "stylesheet" in x))
                          metrics["images"]   = len(soup.find_all("img"))
                      except Exception:
                          pass
              except Exception:
                  # dejar m√©tricas por defecto (None/0)
                  pass
              return metrics

          runs = []
          for _ in range(5):
              runs.append(measure_once(URL))
              time.sleep(0.5)

          # filtrar solo las que devolvieron status_code
          valid = [r for r in runs if r["status_code"] > 0]
          def avg(field):
              vals = [r[field] for r in valid if isinstance(r[field], (int, float)) and r[field] is not None]
              return round(statistics.mean(vals), 3) if vals else None

          out = {
              "samples": len(runs),
              "valid": len(valid),
              "avg_ttfb": avg("ttfb"),
              "avg_total": avg("total_time"),
              "avg_size": int(avg("content_size") or 0),
              "js_files": valid[0]["js_files"] if valid else 0,
              "css_files": valid[0]["css_files"] if valid else 0,
              "images": valid[0]["images"] if valid else 0
          }
          print(json.dumps(out))
          EOF

          PERF_JSON=$(python perf_test.py || echo '{}')
          echo "Raw metrics JSON: $PERF_JSON"

          # Extraemos con jq con defaults seguros
          AVG_TTFB=$(echo "$PERF_JSON" | jq -r '.avg_ttfb // "N/A"')
          AVG_TOTAL=$(echo "$PERF_JSON" | jq -r '.avg_total // "N/A"')
          AVG_SIZE=$(echo "$PERF_JSON" | jq -r '.avg_size // 0')
          JS_FILES=$(echo "$PERF_JSON" | jq -r '.js_files // 0')
          CSS_FILES=$(echo "$PERF_JSON" | jq -r '.css_files // 0')
          IMAGES=$(echo "$PERF_JSON" | jq -r '.images // 0')

          # Ratings (solo si hay n√∫mero)
          rate_ttfb="‚úÖ Excellent"
          if [[ "$AVG_TTFB" != "N/A" ]]; then
            if (( $(echo "$AVG_TTFB > 0.8" | bc -l) )); then rate_ttfb="‚ö†Ô∏è Slow"
            elif (( $(echo "$AVG_TTFB > 0.4" | bc -l) )); then rate_ttfb="üü° Fair"; fi
          else
            rate_ttfb="‚ÑπÔ∏è N/A"
          fi

          rate_total="‚úÖ Fast"
          if [[ "$AVG_TOTAL" != "N/A" ]]; then
            if (( $(echo "$AVG_TOTAL > 3.0" | bc -l) )); then rate_total="‚ùå Too Slow"
            elif (( $(echo "$AVG_TOTAL > 2.0" | bc -l) )); then rate_total="‚ö†Ô∏è Slow"
            elif (( $(echo "$AVG_TOTAL > 1.0" | bc -l) )); then rate_total="üü° Acceptable"; fi
          else
            rate_total="‚ÑπÔ∏è N/A"
          fi

          size_rating="‚úÖ Optimal"
          if [[ "$AVG_SIZE" -gt 2000000 ]]; then size_rating="‚ùå Too Large"
          elif [[ "$AVG_SIZE" -gt 1000000 ]]; then size_rating="‚ö†Ô∏è Large"
          elif [[ "$AVG_SIZE" -gt 500000  ]]; then size_rating="üü° Moderate"; fi

          echo "### Performance Metrics Summary" >> health_report.md
          echo "| Metric | Value | Rating |" >> health_report.md
          echo "|--------|-------|--------|" >> health_report.md
          echo "| Time to First Byte | ${AVG_TTFB}s | $rate_ttfb |" >> health_report.md
          echo "| Total Page Load | ${AVG_TOTAL}s | $rate_total |" >> health_report.md
          echo "| Page Size | $AVG_SIZE bytes | $size_rating |" >> health_report.md
          echo "| JavaScript Files | $JS_FILES | - |" >> health_report.md
          echo "| CSS Files | $CSS_FILES | - |" >> health_report.md
          echo "| Images | $IMAGES | - |" >> health_report.md
          echo "" >> health_report.md

      - name: üéØ Overall Health Assessment & Scoring
        id: assessment
        run: |
          echo "## üéØ Overall Health Assessment" >> health_report.md
          echo "" >> health_report.md

          CONNECTIVITY_OK=${{ steps.connectivity.outputs.connectivity_ok }}
          HEALTH_OK=${{ steps.health.outputs.health_ok }}
          API_OK=${{ steps.api.outputs.api_ok }}
          INTEGRATION_OK=${{ steps.integration.outputs.integration_ok || 'true' }}
          PERFORMANCE_OK=${{ steps.performance.outputs.performance_ok || 'true' }}
          SECURITY_OK=${{ steps.security.outputs.security_ok || 'true' }}

          TOTAL_SCORE=0
          MAX_SCORE=0

          echo "### Detailed Score Breakdown" >> health_report.md
          echo "| Category | Weight | Status | Score | Max Score |" >> health_report.md
          echo "|----------|--------|--------|-------|-----------|" >> health_report.md

          if [[ "$CONNECTIVITY_OK" == "true" ]]; then CONN_SCORE=25; CONN_STATUS="‚úÖ PASS"; else CONN_SCORE=0; CONN_STATUS="‚ùå FAIL"; fi
          TOTAL_SCORE=$((TOTAL_SCORE + CONN_SCORE)); MAX_SCORE=$((MAX_SCORE + 25))
          echo "| Infrastructure & Connectivity | 25% | $CONN_STATUS | $CONN_SCORE | 25 |" >> health_report.md

          if [[ "$HEALTH_OK" == "true" ]]; then HEALTH_SCORE=30; HEALTH_STATUS="‚úÖ PASS"; else HEALTH_SCORE=0; HEALTH_STATUS="‚ùå FAIL"; fi
          TOTAL_SCORE=$((TOTAL_SCORE + HEALTH_SCORE)); MAX_SCORE=$((MAX_SCORE + 30))
          echo "| Core Application Health | 30% | $HEALTH_STATUS | $HEALTH_SCORE | 30 |" >> health_report.md

          if [[ "$API_OK" == "true" ]]; then API_SCORE=20; API_STATUS="‚úÖ PASS"; else API_SCORE=0; API_STATUS="‚ùå FAIL"; fi
          TOTAL_SCORE=$((TOTAL_SCORE + API_SCORE)); MAX_SCORE=$((MAX_SCORE + 20))
          echo "| API & Services | 20% | $API_STATUS | $API_SCORE | 20 |" >> health_report.md

          if [[ "$INTEGRATION_OK" == "true" ]]; then INT_SCORE=10; INT_STATUS="‚úÖ PASS"; else INT_SCORE=0; INT_STATUS="‚ùå FAIL"; fi
          TOTAL_SCORE=$((TOTAL_SCORE + INT_SCORE)); MAX_SCORE=$((MAX_SCORE + 10))
          echo "| Integration & Features | 10% | $INT_STATUS | $INT_SCORE | 10 |" >> health_report.md

          if [[ "$PERFORMANCE_OK" == "true" ]]; then PERF_SCORE=10; PERF_STATUS="‚úÖ PASS"; else PERF_SCORE=5; PERF_STATUS="‚ö†Ô∏è PARTIAL"; fi
          TOTAL_SCORE=$((TOTAL_SCORE + PERF_SCORE)); MAX_SCORE=$((MAX_SCORE + 10))
          echo "| Performance | 10% | $PERF_STATUS | $PERF_SCORE | 10 |" >> health_report.md

          if [[ "$SECURITY_OK" == "true" ]]; then SEC_SCORE=5; SEC_STATUS="‚úÖ PASS"; else SEC_SCORE=2; SEC_STATUS="‚ö†Ô∏è PARTIAL"; fi
          TOTAL_SCORE=$((TOTAL_SCORE + SEC_SCORE)); MAX_SCORE=$((MAX_SCORE + 5))
          echo "| Security | 5% | $SEC_STATUS | $SEC_SCORE | 5 |" >> health_report.md

          PERCENTAGE=$((TOTAL_SCORE * 100 / MAX_SCORE))

          echo "" >> health_report.md
          echo "### üèÜ Final Health Score" >> health_report.md
          COLOR=$( if [[ $PERCENTAGE -ge 90 ]]; then echo 'brightgreen'; elif [[ $PERCENTAGE -ge 75 ]]; then echo 'green'; elif [[ $PERCENTAGE -ge 50 ]]; then echo 'yellow'; else echo 'red'; fi )
          echo "![Health Score](https://img.shields.io/badge/Health%20Score-$PERCENTAGE%25-$COLOR)" >> health_report.md
          echo "" >> health_report.md
          echo "**Total Score: $TOTAL_SCORE/$MAX_SCORE ($PERCENTAGE%)**" >> health_report.md
          echo "" >> health_report.md

          if [[ $PERCENTAGE -ge 95 ]]; then
            echo "**Status: üü¢ EXCELLENT** - All systems optimal" >> health_report.md
            echo "overall_status=excellent" >> $GITHUB_OUTPUT
            echo "status_emoji=üü¢" >> $GITHUB_OUTPUT
          elif [[ $PERCENTAGE -ge 85 ]]; then
            echo "**Status: üü¢ VERY GOOD** - Minor optimizations possible" >> health_report.md
            echo "overall_status=very_good" >> $GITHUB_OUTPUT
            echo "status_emoji=üü¢" >> $GITHUB_OUTPUT
          elif [[ $PERCENTAGE -ge 75 ]]; then
            echo "**Status: üü° GOOD** - Some issues detected" >> health_report.md
            echo "overall_status=good" >> $GITHUB_OUTPUT
            echo "status_emoji=üü°" >> $GITHUB_OUTPUT
          elif [[ $PERCENTAGE -ge 60 ]]; then
            echo "**Status: üü† WARNING** - Multiple issues need attention" >> health_report.md
            echo "overall_status=warning" >> $GITHUB_OUTPUT
            echo "status_emoji=üü†" >> $GITHUB_OUTPUT
          elif [[ $PERCENTAGE -ge 40 ]]; then
            echo "**Status: üî¥ POOR** - Significant problems detected" >> health_report.md
            echo "overall_status=poor" >> $GITHUB_OUTPUT
            echo "status_emoji=üî¥" >> $GITHUB_OUTPUT
          else
            echo "**Status: üÜò CRITICAL** - Immediate attention required" >> health_report.md
            echo "overall_status=critical" >> $GITHUB_OUTPUT
            echo "status_emoji=üÜò" >> $GITHUB_OUTPUT
          fi

          echo "" >> health_report.md
          echo "---" >> health_report.md
          echo "*Generated by House App Advanced Sanity Check v2.0*" >> health_report.md
          echo "*Report ID: ${{ github.run_id }}-$(date +%s)*" >> health_report.md

          echo "score=$PERCENTAGE" >> $GITHUB_OUTPUT

      - name: üì§ Upload Comprehensive Health Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: house-app-health-report-${{ github.run_number }}-production
          path: health_report.md
          retention-days: 90

      - name: üÜò Send Critical Alert
        if: steps.assessment.outputs.overall_status == 'critical' || steps.assessment.outputs.overall_status == 'poor'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "${{ steps.assessment.outputs.status_emoji }} ALERT: House App Health Critical (${{ steps.assessment.outputs.score }}%)"
          to: "joso.jmf@gmail.com"
          from: "House App Advanced Monitor <${{ secrets.SMTP_USERNAME }}>"
          html_body: |
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h2 style="color: #dc3545;">${{ steps.assessment.outputs.status_emoji }} Critical Health Alert - House App</h2>
              <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h3>Alert Summary</h3>
                <ul>
                  <li><strong>Environment:</strong> production</li>
                  <li><strong>Health Score:</strong> ${{ steps.assessment.outputs.score }}%</li>
                  <li><strong>Status:</strong> ${{ steps.assessment.outputs.overall_status }}</li>
                  <li><strong>Timestamp:</strong> $(date -u '+%Y-%m-%d %H:%M:%S UTC')</li>
                  <li><strong>Trigger:</strong> ${{ github.event_name }}</li>
                </ul>
              </div>
              <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 8px; margin: 20px 0;">
                <h4>‚ö†Ô∏è Immediate Action Required</h4>
                <p>Multiple critical issues detected that may affect user experience and application functionality.</p>
              </div>
              <div style="text-align: center; margin: 30px 0;">
                <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" 
                   style="background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
                  üìä View Detailed Report
                </a>
              </div>
              <p style="color: #6c757d; font-size: 12px; text-align: center;">
                This is an automated alert from House App Advanced Health Monitor.<br>
                Report ID: ${{ github.run_id }}-$(date +%s)
              </p>
            </div>
          attachments: health_report.md

      - name: ‚ö†Ô∏è Send Warning Alert
        if: steps.assessment.outputs.overall_status == 'warning' || steps.assessment.outputs.overall_status == 'good'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "${{ steps.assessment.outputs.status_emoji }} House App Health: ${{ steps.assessment.outputs.overall_status }} (${{ steps.assessment.outputs.score }}%)"
          to: "joso.jmf@gmail.com"
          from: "House App Monitor <${{ secrets.SMTP_USERNAME }}>"
          html_body: |
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h2 style="color: #fd7e14;">${{ steps.assessment.outputs.status_emoji }} House App Health Update</h2>
              <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h3>Health Summary</h3>
                <ul>
                  <li><strong>Environment:</strong> production</li>
                  <li><strong>Health Score:</strong> ${{ steps.assessment.outputs.score }}%</li>
                  <li><strong>Status:</strong> ${{ steps.assessment.outputs.overall_status }}</li>
                  <li><strong>Timestamp:</strong> $(date -u '+%Y-%m-%d %H:%M:%S UTC')</li>
                </ul>
              </div>
              <div style="text-align: center; margin: 30px 0;">
                <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" 
                   style="background-color: #17a2b8; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
                  üìã View Full Report
                </a>
              </div>
              <p style="color: #6c757d; font-size: 12px; text-align: center;">
                House App Advanced Health Monitor - Automated Report
              </p>
            </div>
          attachments: health_report.md

      - name: üìà Update Dynamic Status Badge
        if: always()
        run: |
          echo "üìä Health check completed!"
          echo "Final Status: ${{ steps.assessment.outputs.overall_status }}"
          echo "Score: ${{ steps.assessment.outputs.score }}%"
          echo "Report available in artifacts"

      - name: üîÑ Cleanup and Summary
        if: always()
        run: |
          echo ""
          echo "===================="
          echo "üè† HOUSE APP HEALTH CHECK SUMMARY"
          echo "===================="
          echo "Environment: $ENV_NAME"
          echo "Score: ${{ steps.assessment.outputs.score }}%"
          echo "Status: ${{ steps.assessment.outputs.overall_status }} ${{ steps.assessment.outputs.status_emoji }}"
          echo "Report: Available in artifacts"
          echo "Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "===================="
          rm -f load_test.py perf_test.py slack_payload.json assets_js.txt assets_css.txt icons.txt sw_candidates.txt manifest_url.txt discover_assets.py || true
