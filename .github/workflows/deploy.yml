name: üè† House App CI/CD - Build, Test, Push & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/house-app
  CONTAINER_NAME: house-app

jobs:
  # ====================================
  # Job 1: Tests y validaci√≥n de c√≥digo
  # ====================================
  test:
    name: üß™ Run Tests & Code Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: üì¶ Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: üì• Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black safety bandit isort

    - name: üé® Auto-format code with Black
      run: |
        black .
        
    - name: üìè Sort imports with isort
      run: |
        isort .

    - name: üíæ Commit formatting changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff --staged --quiet || git commit -m "üé® Auto-format code with Black and isort"
        git push || echo "No changes to push"
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    - name: üîç Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: üîí Security check with bandit
      run: bandit -r . -f json -o bandit-report.json || true

    - name: üõ°Ô∏è Vulnerability check with safety
      run: safety check --json --output vulnerability-report.json || true

    - name: üß™ Run tests with coverage
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml
      env:
        FLASK_ENV: testing

    - name: üìä Upload coverage reports (disabled)
      # uses: codecov/codecov-action@v4
      # if: always()
      # with:
      #   file: ./coverage.xml
      #   flags: unittests
      #   name: codecov-umbrella
      run: echo "Codecov upload disabled - add CODECOV_TOKEN secret to enable"

    - name: üìã Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          htmlcov/
          bandit-report.json
          vulnerability-report.json
        retention-days: 30

  # ====================================
  # Job 2: Build y push de imagen Docker
  # ====================================
  build:
    name: üèóÔ∏è Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: üì¶ Checkout repository
      uses: actions/checkout@v4

    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: üîß Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîê Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: üèóÔ∏è Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: üîí Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.DOCKER_IMAGE }}:latest
        format: spdx-json
        output-file: sbom.spdx.json

    - name: üõ°Ô∏è Scan image for vulnerabilities
      uses: anchore/scan-action@v3
      id: scan
      with:
        image: ${{ env.DOCKER_IMAGE }}:latest
        fail-build: false
        severity-cutoff: high

    - name: üìã Upload scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          sbom.spdx.json
          ${{ steps.scan.outputs.sarif }}
        retention-days: 30

  # ====================================
  # Job 3: Deploy a producci√≥n
  # ====================================
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-domain.com
    
    steps:
    - name: üì¶ Checkout repository (for scripts)
      uses: actions/checkout@v4

    - name: üöÄ Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.3
      env:
        DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
        CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USER || 'root' }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: ${{ secrets.DROPLET_PORT || '22' }}
        timeout: 60
        command_timeout: 300
        script_stop: true
        envs: DOCKER_IMAGE,CONTAINER_NAME
        script: |
          set -euo pipefail

          # Colores para logs
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color

          log() {
              echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
          }

          error() {
              echo -e "${RED}[ERROR]${NC} $1" >&2
          }

          success() {
              echo -e "${GREEN}[SUCCESS]${NC} $1"
          }

          warning() {
              echo -e "${YELLOW}[WARNING]${NC} $1"
          }

          # Deploy simplificado con mejor logging
          log "üîÑ Iniciando despliegue..."
          
          # Graceful shutdown
          if docker ps | grep -q $CONTAINER_NAME; then
              log "üõë Deteniendo contenedor actual..."
              docker stop --time=30 $CONTAINER_NAME 2>/dev/null || true
              docker rm $CONTAINER_NAME 2>/dev/null || true
          fi

          log "‚¨áÔ∏è Descargando imagen desde Docker Hub..."
          docker pull ${DOCKER_IMAGE}:latest

          log "üöÄ Iniciando nuevo contenedor..."
          docker run -d --name $CONTAINER_NAME -p 5000:5000 \
              -e MONGO_USER="${{ secrets.MONGO_USER }}" \
              -e MONGO_PASS="${{ secrets.MONGO_PASS }}" \
              -e VAPID_PUBLIC_KEY="${{ secrets.VAPID_PUBLIC_KEY }}" \
              -e VAPID_PRIVATE_KEY="${{ secrets.VAPID_PRIVATE_KEY }}" \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e GROQ_API_KEY="${{ secrets.GROQ_API_KEY }}" \
              -e FLASK_ENV="production" \
              --restart unless-stopped \
              --memory="512m" \
              --cpus="1.0" \
              --health-cmd="curl -f http://localhost:5000/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              --log-driver=json-file \
              --log-opt max-size=50m \
              --log-opt max-file=3 \
              ${DOCKER_IMAGE}:latest

          log "‚è≥ Esperando que el contenedor est√© listo..."
          sleep 15

          # Health check simple
          if docker ps | grep -q $CONTAINER_NAME; then
              success "‚úÖ Despliegue exitoso!"
              docker ps --filter "name=$CONTAINER_NAME"
          else
              error "‚ùå Despliegue fallido"
              docker logs --tail=20 $CONTAINER_NAME
              exit 1
          fi

  # ====================================
  # Job 4: Cleanup
  # ====================================
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: üßπ Clean up old Docker images
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USER || 'root' }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        script: |
          # Mantener solo las √∫ltimas 3 im√°genes
          docker images ${{ env.DOCKER_IMAGE }} --format "table {{.ID}}\t{{.CreatedAt}}" | tail -n +4 | awk '{print $1}' | xargs -r docker rmi || true
          
          # Limpiar sistema
          docker system prune -f --volumes || true