name: 🏠 House App CI/CD - Build, Test, Push & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Necesario si vas a hacer commits desde el workflow (Black/isort)
permissions:
  contents: write

# Evita despliegues solapados en main
concurrency:
  group: house-app-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/house-app
  CONTAINER_NAME: house-app
  SSH_USER: ${{ secrets.DROPLET_USER != '' && secrets.DROPLET_USER || 'root' }}
  SSH_PORT: ${{ secrets.DROPLET_PORT != '' && secrets.DROPLET_PORT || '22' }}

jobs:
  # ====================================
  # Job 1: Tests y validación de código
  # ====================================
  test:
    name: 🧪 Run Tests & Code Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📥 Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black safety bandit isort

      - name: ✅ Lint with flake8
        run: flake8 . || true

      - name: 🎨 Auto-format code with Black
        run: black .

      - name: 📏 Sort imports with isort
        run: isort .

      - name: 💾 Commit formatting changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "🎨 Auto-format code with Black and isort"
          git push || echo "No changes to push"

      - name: 🔒 Security check with bandit
        run: bandit -r . -f json -o bandit-report.json || true

      - name: 🛡️ Vulnerability check with safety
        run: safety check --output json --save-json vulnerability-report.json || true

      - name: 🧪 Run tests with coverage
        env:
          FLASK_ENV: testing
        run: |
          mkdir -p tests
          if [ -f "tests/test_basic.py" ]; then
            pytest --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml -v
          else
            echo "No tests found, running pytest anyway..."
            pytest --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml -v || echo "Tests completed with warnings"
          fi

      - name: 📋 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.xml
            htmlcov/
            bandit-report.json
            vulnerability-report.json
          retention-days: 30

  # ====================================
  # Job 2: Build y push de imagen Docker
  # ====================================
  build:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      sha-tag: ${{ env.SHA_TAG }}

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: ⛳ Pick SHA tag (optional)
        run: |
          echo "SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | grep -m1 '^main-')" >> $GITHUB_ENV

      - name: 🔒 Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.DOCKER_IMAGE }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: 🛡️ Scan image for vulnerabilities
        id: scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.DOCKER_IMAGE }}:latest
          fail-build: false
          severity-cutoff: high

      - name: 📋 Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            sbom.spdx.json
            ${{ steps.scan.outputs.sarif }}
          retention-days: 30

  # ====================================
  # Job 3: Deploy a producción
  # ====================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://www.house-app.casa

    steps:
      - name: 📦 Checkout repository (for scripts)
        uses: actions/checkout@v4

      - name: 🚀 Deploy to DigitalOcean Droplet (immutable by digest)
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          IMAGE_DIGEST: ${{ needs.build.outputs.image-digest }}
          HEALTH_URL: "http://localhost:5000/health"
          PUBLIC_HEALTH_URL: "https://www.house-app.casa/health"
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          timeout: 60s
          command_timeout: 600s
          script_stop: true
          envs: DOCKER_IMAGE,CONTAINER_NAME,IMAGE_DIGEST,HEALTH_URL,PUBLIC_HEALTH_URL
          script: |
            set -euo pipefail
            log() { echo "[$(date +'%F %T')] $*"; }
            fail() { echo "[ERROR] $*" >&2; exit 1; }

            # Imagen inmutable por digest
            IMAGE_REF="${DOCKER_IMAGE}@${IMAGE_DIGEST}"

            log "⬇️ Pulling image $IMAGE_REF"
            docker pull "$IMAGE_REF"

            # Parar lo viejo SOLO después de tener la nueva imagen
            if docker ps --format '{{.Names}}' | grep -qx "$CONTAINER_NAME"; then
              log "🛑 Stopping container $CONTAINER_NAME"
              docker stop --time=30 "$CONTAINER_NAME" || true
              docker rm "$CONTAINER_NAME" || true
            fi

            log "🚀 Starting container $CONTAINER_NAME"
            docker run -d --name "$CONTAINER_NAME" -p 5000:5000 \
              -e MONGO_USER='${{ secrets.MONGO_USER }}' \
              -e MONGO_PASS='${{ secrets.MONGO_PASS }}' \
              -e VAPID_PUBLIC_KEY='${{ secrets.VAPID_PUBLIC_KEY }}' \
              -e VAPID_PRIVATE_KEY='${{ secrets.VAPID_PRIVATE_KEY }}' \
              -e SECRET_KEY='${{ secrets.SECRET_KEY }}' \
              -e GROQ_API_KEY='${{ secrets.GROQ_API_KEY }}' \
              -e FLASK_ENV='production' \
              --restart unless-stopped \
              --memory="512m" \
              --cpus="1.0" \
              --health-cmd="curl -fsS ${HEALTH_URL} || exit 1" \
              --health-interval=15s \
              --health-timeout=5s \
              --health-retries=5 \
              --log-driver=json-file \
              --log-opt max-size=50m \
              --log-opt max-file=3 \
              "$IMAGE_REF"

            log "⏳ Waiting for container to become healthy..."
            for i in $(seq 1 40); do
              status=$(docker inspect --format='{{.State.Health.Status}}' "$CONTAINER_NAME" 2>/dev/null || echo 'starting')
              if [ "$status" = "healthy" ]; then
                log "✅ Container is healthy"
                break
              fi
              sleep 3
            done

            current=$(docker inspect --format='{{.State.Health.Status}}' "$CONTAINER_NAME" 2>/dev/null || echo 'unknown')
            if [ "$current" != "healthy" ]; then
              echo "---- recent logs ----"
              docker logs --tail=200 "$CONTAINER_NAME" || true
              fail "Container did not become healthy (status=$current)"
            fi

            log "🔎 Public smoke-check ${PUBLIC_HEALTH_URL}"
            curl -fsS --max-time 10 "${PUBLIC_HEALTH_URL}" >/dev/null || {
              echo "---- recent logs ----"
              docker logs --tail=200 "$CONTAINER_NAME" || true
              fail "Public health check failed"
            }

            log "🎉 Deploy OK: $IMAGE_REF"

  # ====================================
  # Job 4: Cleanup
  # ====================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: 🧹 Clean up old Docker images (keep last 2)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            set -e
            # Borra imágenes antiguas de este repo manteniendo las 2 más recientes
            imgs=$(docker images ${{ env.DOCKER_IMAGE }} --format '{{.Repository}}:{{.Tag}} {{.CreatedAt}}' | sort -rk2 | tail -n +3 | awk '{print $1}')
            if [ -n "$imgs" ]; then
              echo "$imgs" | xargs -r docker rmi || true
            fi
            docker image prune -f || true
            docker container prune -f || true
